import GynaguardPromise from "@/components/sections/GynaguardPromise/GynaguardPromise";
import Logo from "@/components/elements/ui/Logo";
import ContentWrap from "@/components/elements/ui/ContentWrap";
import ProductsRange from "@/components/sections/products-range/ProductsRange";
import Reviews from "@/components/sections/products-range/Reviews";
import Tips from "@/components/sections/products-range/Tips";
import { useSubCategories } from "@/context/subCategories";
import { fetchAPI } from "@/lib/api";
import { ApiProductsRangeProductsRange } from "@/schemas";
import {
  CategoryType,
  ProductType,
  ReviewType,
  SubCategoryType,
} from "@/types/products";
import { GetStaticProps, InferGetStaticPropsType } from "next";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import React, {
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
} from "react";

const sliderWidth = 7;

const ProductRangePage = ({
  data,
  products,
  categories,
  subcategories,
  newProducts,
  pageData,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
  const blogs = pageData?.attributes?.page_components
    .filter((item: any) => item.__component === "layout.blogs")
    .map((item: any) => {
      return item.blogs.data;
    })[0]
    .map((article: any) => ({
      ...article?.attributes,
      id: article.id,
    }))
    .map((article: any) => ({
      ...article,
      desktop_image: article.desktop_image,
      mobile_image: article.mobile_image,
      body: article.intro_text,
    }));

  const links: {
    name: string;
    link: string;
    text: string;
    index: number;
  }[] = categories.map((category, idx) => ({
    name: category.name,
    link: category.name,
    text: category.description,
    index: idx - 1,
  }));
  const router = useRouter();
  const { page } = router.query;
  const { isReady } = router;
  const description = links.find((link) => link.link === page) || links[0];
  const [fadeNavBottomBarClass, setFadeNavBottomBarClass] =
    useState("-bottom-2");

  const [activeTabIndex, setActiveTabIndex] = useState<string | null>(null);
  const [tabUnderlineWidth, setTabUnderlineWidth] = useState(0);
  const [tabUnderlineLeft, setTabUnderlineLeft] = useState(0);
  const [showWhiteLine, setShowWhiteLine] = useState(false);

  const tabsRef = useRef<any>([]);
  const moveToActiveTab = () => {
    setActiveTabIndex(page as string);
  };
  useEffect(() => {
    function setTabPosition() {
      if (!activeTabIndex) return;

      const currentTab = tabsRef.current[activeTabIndex];
      setTabUnderlineLeft(currentTab?.offsetLeft ?? 0);
      setTabUnderlineWidth(currentTab?.clientWidth ?? 0);
    }

    setTabPosition();
    window.addEventListener("resize", setTabPosition);

    return () => window.removeEventListener("resize", setTabPosition);
  }, [activeTabIndex]);

  const pageProducts = useMemo(() => {
    return products.filter((item: any) => {
      return item.category.data?.attributes?.name === page;
    });
  }, [products, data, page]);

  const reviews = products.map((product: any) => {
    return product.reviews;
  });

  const reviewsArray = reviews
    .reduce((acc: any, curr: any) => {
      return acc.concat(curr);
    }, [])
    .reduce((acc: any, curr: any) => {
      for (const review of curr.data) {
        acc.push(review);
      }
      return acc;
    }, [])
    .map((review: any) => ({ ...review?.attributes, id: review.id }));

  // const moveSlider = (index: number) => {
  //   setSliderPosition(190 * index);
  // };
  const { setSubCategories, setNewProducts } = useSubCategories();
  useEffect(() => {
    setNewProducts(newProducts);
    setSubCategories(subcategories);
  }, [setSubCategories, subcategories, setNewProducts, newProducts]);
  //////if router.query.page === undefined, push the page to ?page=comfort
  useEffect(() => {
    if (isReady) {
      if (!page) {
        router.push("?page=comfort");
        setActiveTabIndex("comfort");
      } else {
        setActiveTabIndex(page as string);
      }
    }
  }, [page, isReady]);

  return (
    <>
      <Head>
        <title>Product Range</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <div className=" flex flex-col items-center mt-[6rem]  ">
        <div className="flex max-sm:flex-col max-sm:items-center gap-3 items-end justify-center md:my-12 my-5">
          <Logo color="pink" height={300} width={300} />
          <h1 className="text-pink font-medium md:text-[2.5em] text-4xl uppercase  flex items-end h-full leading-10">
            product range
          </h1>
        </div>
        <div className="flex flex-col w-full ">
          <div className="flex relative flex-col uppercase w-full overflow-hidden  items-center max-sm:text-center text-black md:text-lg text-md border-b border-b-green  ">
            <div className="flex max-sm:gap-8 gap-[4rem] ">
              {links.map((item, idx) => {
                return (
                  <Link
                    key={item.name}
                    ref={(el) => (tabsRef.current[item.name] = el)}
                    href={`?page=${item.name}`}
                    onMouseEnter={() => {
                      setActiveTabIndex(item.name);
                    }}
                    onMouseLeave={moveToActiveTab}
                    className={`hover:text-green z-[10]  md:hover:translate-y-[3px] transition-all ease-in transition-duration-[3000ms] ${
                      page === item.link && "  translate-y-[3px] "
                    } ${
                      !page &&
                      idx === 0 &&
                      "  translate-y-[3px]  transition duration-200 transition-all ease-in-out"
                    } relative  pb-4   `}
                    scroll={false}
                  >
                    <span
                      className={`font-bold ${
                        page === item.link && "text-green"
                      } ${!page && idx === 0 && "text-green"} `}
                    >
                      {item.name}
                    </span>
                  </Link>
                );
              })}
            </div>

            <span
              style={{ left: tabUnderlineLeft, width: tabUnderlineWidth }}
              className={`absolute  bg-green  block h-2 bg-black transition-all duration-300 bottom-0`}
            />
          </div>
          <div className="text-brown text-center my-5 text-lg">
            {description.text}
          </div>
        </div>

        {/* products range */}
        <ContentWrap className="mt-14 overflow-hidden">
          <ProductsRange products={pageProducts} />
          <div className="mt-[5rem]">
            <Reviews
              reviews={[reviewsArray[0], reviewsArray[1], reviewsArray[2]]}
            />
          </div>
        </ContentWrap>
        <div className="bg-gradient-to-b from-[#E9E7E6] to-[#E7D4DB] w-full py-8 mt-14">
          <Tips blogs={blogs} />
        </div>
        <GynaguardPromise />
      </div>
    </>
  );
};

export const getStaticProps: GetStaticProps<{
  data: ApiProductsRangeProductsRange;
  products: ProductType[];
  categories: CategoryType[];
  subcategories: SubCategoryType[];
  newProducts: ProductType[];
  pageData: any;
}> = async (ctx) => {
  const pagePopulate = [
    "products.products.image",
    "products.products",
    "products.products.reviews",
    "products.products.category",
  ];
  const { data } = await fetchAPI("products-range", pagePopulate);
  const { data: subcategories } = await fetchAPI("subcategories", ["products"]);
  const { data: pageData } = await fetchAPI("basi-pages/3", ["deep"]);
  const { data: categories } = await fetchAPI("categories");
  const products: ProductType[] = data?.attributes?.products.products.data.map(
    (product: any) => ({ ...product?.attributes, id: product.id })
  );
  const newProducts = products.filter((product) => product.isNew);
  products.sort((a, b) => {
    if (a.id > b.id) {
      return 1;
    }
    if (a.id < b.id) {
      return -1;
    }
    return 0;
  });

  return {
    props: {
      data,
      products,
      newProducts,
      categories: categories.map((category: any) => ({
        ...category?.attributes,
        id: category.id,
      })),
      pageData,
      subcategories: subcategories.map((subcategory: any) => ({
        ...subcategory?.attributes,
        id: subcategory.id,
      })),
    },
  };
};
export default ProductRangePage;
